class Ponto:
	# variáveis:

	 coordenadaX
	 coordenadaY

	# funções:

	 coordenadas(coordenadaX,coordenadaY):
		Obter coordenadaX e coordenadaY
	
	 mostrar_coordenadas(coordenadaX,coordenadaY):
		Mostrar as coordenadas do ponto

class Reta:
	# variáveis:

	 equacao_reta
	 coordenadaX
	 coordenadaY

	# funções:

	 eq_reta(x1,y1,x2,y2):
		Obter 2 pontos e gerar a equação da reta, armazenando na variável equacao_reta e mostrando a equação da reta ao
		usuário

	 distancia_ponto_reta(equacao_reta, coordenadaX, coordenadaY):
		Calcular a distância entre o ponto da classe ponto e a reta usando a fórmula: 
			sqrt((a*coordenadaX + b*coordenadaY + c)^2)/sqrt(a^2 + b^2) 
			# Considerando que a equação da reta siga o padrão: ax + by + c = 0
		Retornar ao usuário a distância do ponto à reta

	 verifica_ponto_reta(equacao_reta, CoordenadaX, CoordenadaY):
		Calcular o valor de y quando x assumir o valor de CoordenadaX
		Verificar se o valor calculado de y é igual ao da CoordenadaY, se for, retorna 'sim', se não, retorna 'não'

class Circulo:
	# variáveis:
	 
	 centroX
	 centroY
	 raio
	 equacao_circulo
	 coordenadaX
	 coordenadaY

	# funções:
	
	 eq_circulo(centroX, centroY,raio):
		Obter as coordenadas do centro e armazenar nas variáveis centroX e centroY
		Obter o valor do raio do círculo
		Montar a equação do círculo usando a fórmula: (x - centroX)^2 + (y - centroY)^2 = R^2 retorna isso ao usuário

	 calcula_area(raio):
		Calcular a área do círculo usando a fórmula: pi * raio^2 e retornar ao usuário
	
	 calcula_comprimento(raio):
		Calcular o comprimento da circunferência usando a fórmula: 2 * pi * raio e retornar o valor ao usuário

	verifica_ponto_circulo(coordenadaX, coordenadaY, centroX, centroY,raio):
		Calcular a distância entre o ponto e o centro do círculo utilizando a fórmula: 
			sqrt((coordenadaX - centroX)^2 + (coordenadaY - centroY)^2)
		Se a distância calculada for menor que o raio, a função retorna 'sim', caso contrário, 'não'

class Retangulo:
	# variáveis:

	 largura
	 comprimento

	# funções:
	
	 retangle_area(largura, comprimento):
		Obter a largura e o comprimento do retângulo
		Calcular a área seguindo a fórmula: largura*comprimento e retornar a área ao usuário

	 retangle_diagonal(largura, comprimento):
		Obter a largura e o comprimento do retângulo
		Calcular a diagonal seguindo a fórmula: sqrt(largura^2 + comprimento^2) e retornar a diagonal ao usuário